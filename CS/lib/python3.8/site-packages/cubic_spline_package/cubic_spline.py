#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Creates a linear system using linear_system.py, solves using Jacobi.py. 
Returns the cubic spline evaluated at points in the grid.
"""
import numpy as np
import Jacobi, linear_system

def cubic_spline(x,y,grid,tol=0.1):
    "solve the quadratic coefficents"
    lin_sys=linear_system.linear_system(x,y)
    c=Jacobi.jacobi_method(lin_sys[0],lin_sys[1])

    "solve for the linear and cubic coefficents"
    
    delta_x=x[1:]-x[:-1]
    delta_y=y[1:]-y[:-1]
    
    d=(c[1:]-c[:-1])/(3*delta_x)
    b=(delta_y/delta_x)-(delta_x/3)*(2*c[:-1]+c[1:])
    
    """for every point in the grid, check which interva it is in and return
    the appropriate cubic polynomial evaluated at the grid point
    """
    
    grid_evals=[]
    i=0
    j=1
    
    
    for point in grid:
        if point>x[i]:
            if point<x[j]:
                diff=point-x[j-1]
                val=y[j-1]+b[j-1]*diff+c[j-1]*diff**2+d[j-1]*diff**3             
                grid_evals.append(val)
            else: j=j+1
        else: i=i+1
        
    return(grid_evals)